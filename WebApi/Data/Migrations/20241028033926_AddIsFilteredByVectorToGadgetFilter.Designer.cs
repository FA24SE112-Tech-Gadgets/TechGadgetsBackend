// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;
using WebApi.Data;

#nullable disable

namespace WebApi.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241028033926_AddIsFilteredByVectorToGadgetFilter")]
    partial class AddIsFilteredByVectorToGadgetFilter
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebApi.Data.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("WebApi.Data.Entities.BillingMail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("BillingMails");
                });

            modelBuilder.Entity("WebApi.Data.Entities.BillingMailApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SellerApplicationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SellerApplicationId");

                    b.ToTable("BillingMailApplications");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("WebApi.Data.Entities.CartGadget", b =>
                {
                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GadgetId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("CartId", "GadgetId");

                    b.HasIndex("GadgetId");

                    b.ToTable("CartGadgets");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("WebApi.Data.Entities.CategoryBrand", b =>
                {
                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("BrandId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryBrands");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("CCCD")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("WebApi.Data.Entities.CustomerInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerInformation");
                });

            modelBuilder.Entity("WebApi.Data.Entities.FavoriteGadget", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GadgetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CustomerId", "GadgetId");

                    b.HasIndex("GadgetId");

                    b.ToTable("FavoriteGadgets");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Gadget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Vector>("ConditionVector")
                        .IsRequired()
                        .HasColumnType("vector(384)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsForSale")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Vector>("NameVector")
                        .IsRequired()
                        .HasColumnType("vector(384)");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SellerId");

                    b.ToTable("Gadgets");
                });

            modelBuilder.Entity("WebApi.Data.Entities.GadgetDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GadgetId")
                        .HasColumnType("uuid");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GadgetId");

                    b.ToTable("GadgetDescriptions");
                });

            modelBuilder.Entity("WebApi.Data.Entities.GadgetFilter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFilteredByVector")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SpecificationKeyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SpecificationUnitId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Vector>("Vector")
                        .IsRequired()
                        .HasColumnType("vector");

                    b.HasKey("Id");

                    b.HasIndex("SpecificationKeyId");

                    b.HasIndex("SpecificationUnitId");

                    b.ToTable("GadgetFilters");
                });

            modelBuilder.Entity("WebApi.Data.Entities.GadgetHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GadgetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GadgetId");

                    b.ToTable("GadgetHistories");
                });

            modelBuilder.Entity("WebApi.Data.Entities.GadgetImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GadgetId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GadgetId");

                    b.ToTable("GadgetImages");
                });

            modelBuilder.Entity("WebApi.Data.Entities.KeywordHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("KeywordHistories");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPositive")
                        .HasColumnType("boolean");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("SellerOrderItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SellerOrderItemId")
                        .IsUnique();

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SearchAI", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CanAddMore")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SearchAIs");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SearchAIVector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("SearchAIId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Vector>("Vector")
                        .IsRequired()
                        .HasColumnType("vector(384)");

                    b.HasKey("Id");

                    b.HasIndex("SearchAIId");

                    b.ToTable("SearchAIVectors");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Seller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Vector>("AddressVector")
                        .IsRequired()
                        .HasColumnType("vector(384)");

                    b.Property<string>("BusinessModel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BusinessRegistrationCertificateUrl")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShopAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SellerApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BusinessModel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BusinessRegistrationCertificateUrl")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RejectReason")
                        .HasColumnType("text");

                    b.Property<string>("ShopAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SellerApplications");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SellerInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("SellerInformation");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SellerOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerInformationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SellerInformationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerInformationId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SellerId");

                    b.HasIndex("SellerInformationId");

                    b.ToTable("SellerOrders");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SellerOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GadgetId")
                        .HasColumnType("uuid");

                    b.Property<int>("GadgetPrice")
                        .HasColumnType("integer");

                    b.Property<int>("GadgetQuantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SellerOrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GadgetId");

                    b.HasIndex("SellerOrderId");

                    b.ToTable("SellerOrderItems");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SellerReply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId")
                        .IsUnique();

                    b.HasIndex("SellerId");

                    b.ToTable("SellerReplies");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SpecificationKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SpecificationKeys");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SpecificationUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SpecificationKeyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SpecificationKeyId");

                    b.ToTable("SpecificationUnits");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SpecificationValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GadgetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecificationKeyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SpecificationUnitId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Vector>("Vector")
                        .IsRequired()
                        .HasColumnType("vector(384)");

                    b.HasKey("Id");

                    b.HasIndex("GadgetId");

                    b.HasIndex("SpecificationKeyId");

                    b.HasIndex("SpecificationUnitId");

                    b.ToTable("SpecificationValues");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SystemSellerOrderTracking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SellerOrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SystemWalletId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("SellerOrderId")
                        .IsUnique();

                    b.HasIndex("SystemWalletId");

                    b.HasIndex("ToUserId");

                    b.ToTable("SystemSellerOrderTrackings");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SystemWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SystemWallets");
                });

            modelBuilder.Entity("WebApi.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LoginMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebApi.Data.Entities.UserVerify", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("VerifyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VerifyStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserVerifies");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("WebApi.Data.Entities.WalletTracking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DepositedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaymentCode")
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefundedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SellerOrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SellerPaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("SellerOrderId")
                        .IsUnique();

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTrackings");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Admin", b =>
                {
                    b.HasOne("WebApi.Data.Entities.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("WebApi.Data.Entities.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Data.Entities.BillingMail", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Seller", "Seller")
                        .WithMany("BillingMails")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("WebApi.Data.Entities.BillingMailApplication", b =>
                {
                    b.HasOne("WebApi.Data.Entities.SellerApplication", "SellerApplication")
                        .WithMany("BillingMailApplications")
                        .HasForeignKey("SellerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SellerApplication");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Cart", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Customer", "Customer")
                        .WithOne("Cart")
                        .HasForeignKey("WebApi.Data.Entities.Cart", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WebApi.Data.Entities.CartGadget", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Cart", "Cart")
                        .WithMany("CartGadgets")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.Gadget", "Gadget")
                        .WithMany("CartGadgets")
                        .HasForeignKey("GadgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Gadget");
                });

            modelBuilder.Entity("WebApi.Data.Entities.CategoryBrand", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Brand", "Brand")
                        .WithMany("CategoryBrands")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.Category", "Category")
                        .WithMany("CategoryBrands")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Customer", b =>
                {
                    b.HasOne("WebApi.Data.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("WebApi.Data.Entities.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Data.Entities.CustomerInformation", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Customer", "Customer")
                        .WithMany("CustomerInformation")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WebApi.Data.Entities.FavoriteGadget", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Customer", "Customer")
                        .WithMany("FavoriteGadgets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.Gadget", "Gadget")
                        .WithMany("FavoriteGadgets")
                        .HasForeignKey("GadgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Gadget");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Gadget", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Brand", "Brand")
                        .WithMany("Gadgets")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.Category", "Category")
                        .WithMany("Gadgets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.Seller", "Seller")
                        .WithMany("Gadgets")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("WebApi.Data.Entities.GadgetDescription", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Gadget", "Gadget")
                        .WithMany("GadgetDescriptions")
                        .HasForeignKey("GadgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gadget");
                });

            modelBuilder.Entity("WebApi.Data.Entities.GadgetFilter", b =>
                {
                    b.HasOne("WebApi.Data.Entities.SpecificationKey", "SpecificationKey")
                        .WithMany("GadgetFilters")
                        .HasForeignKey("SpecificationKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.SpecificationUnit", "SpecificationUnit")
                        .WithMany("GadgetFilters")
                        .HasForeignKey("SpecificationUnitId");

                    b.Navigation("SpecificationKey");

                    b.Navigation("SpecificationUnit");
                });

            modelBuilder.Entity("WebApi.Data.Entities.GadgetHistory", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Customer", "Customer")
                        .WithMany("GadgetHistories")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.Gadget", "Gadget")
                        .WithMany("GadgetHistories")
                        .HasForeignKey("GadgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Gadget");
                });

            modelBuilder.Entity("WebApi.Data.Entities.GadgetImage", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Gadget", "Gadget")
                        .WithMany("GadgetImages")
                        .HasForeignKey("GadgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gadget");
                });

            modelBuilder.Entity("WebApi.Data.Entities.KeywordHistory", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Customer", "Customer")
                        .WithMany("KeywordHistories")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Manager", b =>
                {
                    b.HasOne("WebApi.Data.Entities.User", "User")
                        .WithOne("Manager")
                        .HasForeignKey("WebApi.Data.Entities.Manager", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Notification", b =>
                {
                    b.HasOne("WebApi.Data.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Order", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Review", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.SellerOrderItem", "SellerOrderItem")
                        .WithOne("Review")
                        .HasForeignKey("WebApi.Data.Entities.Review", "SellerOrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("SellerOrderItem");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SearchAIVector", b =>
                {
                    b.HasOne("WebApi.Data.Entities.SearchAI", "SearchAI")
                        .WithMany("SearchAIVectors")
                        .HasForeignKey("SearchAIId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SearchAI");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Seller", b =>
                {
                    b.HasOne("WebApi.Data.Entities.User", "User")
                        .WithOne("Seller")
                        .HasForeignKey("WebApi.Data.Entities.Seller", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SellerApplication", b =>
                {
                    b.HasOne("WebApi.Data.Entities.User", "User")
                        .WithMany("SellerApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SellerInformation", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Seller", "Seller")
                        .WithMany("SellerInformation")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SellerOrder", b =>
                {
                    b.HasOne("WebApi.Data.Entities.CustomerInformation", "CustomerInformation")
                        .WithMany("SellerOrders")
                        .HasForeignKey("CustomerInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.Order", "Order")
                        .WithMany("SellerOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.Seller", "Seller")
                        .WithMany("SellerOrders")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.SellerInformation", "SellerInformation")
                        .WithMany("SellerOrders")
                        .HasForeignKey("SellerInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerInformation");

                    b.Navigation("Order");

                    b.Navigation("Seller");

                    b.Navigation("SellerInformation");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SellerOrderItem", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Gadget", "Gadget")
                        .WithMany("SellerOrderItems")
                        .HasForeignKey("GadgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.SellerOrder", "SellerOrder")
                        .WithMany("SellerOrderItems")
                        .HasForeignKey("SellerOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gadget");

                    b.Navigation("SellerOrder");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SellerReply", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Review", "Review")
                        .WithOne("SellerReply")
                        .HasForeignKey("WebApi.Data.Entities.SellerReply", "ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.Seller", "Seller")
                        .WithMany("SellerReplies")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SpecificationKey", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Category", "Category")
                        .WithMany("SpecificationKeys")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SpecificationUnit", b =>
                {
                    b.HasOne("WebApi.Data.Entities.SpecificationKey", "SpecificationKey")
                        .WithMany("SpecificationUnits")
                        .HasForeignKey("SpecificationKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpecificationKey");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SpecificationValue", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Gadget", "Gadget")
                        .WithMany("SpecificationValues")
                        .HasForeignKey("GadgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.SpecificationKey", "SpecificationKey")
                        .WithMany("SpecificationValues")
                        .HasForeignKey("SpecificationKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.SpecificationUnit", "SpecificationUnit")
                        .WithMany("SpecificationValues")
                        .HasForeignKey("SpecificationUnitId");

                    b.Navigation("Gadget");

                    b.Navigation("SpecificationKey");

                    b.Navigation("SpecificationUnit");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SystemSellerOrderTracking", b =>
                {
                    b.HasOne("WebApi.Data.Entities.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.SellerOrder", "SellerOrder")
                        .WithOne("SystemOrderDetailTracking")
                        .HasForeignKey("WebApi.Data.Entities.SystemSellerOrderTracking", "SellerOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.SystemWallet", "SystemWallet")
                        .WithMany("SystemOrderDetailTrackings")
                        .HasForeignKey("SystemWalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("SellerOrder");

                    b.Navigation("SystemWallet");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("WebApi.Data.Entities.UserVerify", b =>
                {
                    b.HasOne("WebApi.Data.Entities.User", "User")
                        .WithMany("UserVerifies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Wallet", b =>
                {
                    b.HasOne("WebApi.Data.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("WebApi.Data.Entities.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Data.Entities.WalletTracking", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Order", "Order")
                        .WithOne("WalletTracking")
                        .HasForeignKey("WebApi.Data.Entities.WalletTracking", "OrderId");

                    b.HasOne("WebApi.Data.Entities.SellerOrder", "SellerOrder")
                        .WithOne("WalletTracking")
                        .HasForeignKey("WebApi.Data.Entities.WalletTracking", "SellerOrderId");

                    b.HasOne("WebApi.Data.Entities.Wallet", "Wallet")
                        .WithMany("WalletTrackings")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("SellerOrder");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Brand", b =>
                {
                    b.Navigation("CategoryBrands");

                    b.Navigation("Gadgets");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Cart", b =>
                {
                    b.Navigation("CartGadgets");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Category", b =>
                {
                    b.Navigation("CategoryBrands");

                    b.Navigation("Gadgets");

                    b.Navigation("SpecificationKeys");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Customer", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("CustomerInformation");

                    b.Navigation("FavoriteGadgets");

                    b.Navigation("GadgetHistories");

                    b.Navigation("KeywordHistories");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("WebApi.Data.Entities.CustomerInformation", b =>
                {
                    b.Navigation("SellerOrders");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Gadget", b =>
                {
                    b.Navigation("CartGadgets");

                    b.Navigation("FavoriteGadgets");

                    b.Navigation("GadgetDescriptions");

                    b.Navigation("GadgetHistories");

                    b.Navigation("GadgetImages");

                    b.Navigation("SellerOrderItems");

                    b.Navigation("SpecificationValues");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Order", b =>
                {
                    b.Navigation("SellerOrders");

                    b.Navigation("WalletTracking")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Data.Entities.Review", b =>
                {
                    b.Navigation("SellerReply");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SearchAI", b =>
                {
                    b.Navigation("SearchAIVectors");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Seller", b =>
                {
                    b.Navigation("BillingMails");

                    b.Navigation("Gadgets");

                    b.Navigation("SellerInformation");

                    b.Navigation("SellerOrders");

                    b.Navigation("SellerReplies");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SellerApplication", b =>
                {
                    b.Navigation("BillingMailApplications");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SellerInformation", b =>
                {
                    b.Navigation("SellerOrders");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SellerOrder", b =>
                {
                    b.Navigation("SellerOrderItems");

                    b.Navigation("SystemOrderDetailTracking")
                        .IsRequired();

                    b.Navigation("WalletTracking");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SellerOrderItem", b =>
                {
                    b.Navigation("Review");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SpecificationKey", b =>
                {
                    b.Navigation("GadgetFilters");

                    b.Navigation("SpecificationUnits");

                    b.Navigation("SpecificationValues");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SpecificationUnit", b =>
                {
                    b.Navigation("GadgetFilters");

                    b.Navigation("SpecificationValues");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SystemWallet", b =>
                {
                    b.Navigation("SystemOrderDetailTrackings");
                });

            modelBuilder.Entity("WebApi.Data.Entities.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("Manager");

                    b.Navigation("Notifications");

                    b.Navigation("Seller");

                    b.Navigation("SellerApplications");

                    b.Navigation("UserVerifies");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Wallet", b =>
                {
                    b.Navigation("WalletTrackings");
                });
#pragma warning restore 612, 618
        }
    }
}
